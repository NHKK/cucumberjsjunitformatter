'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
var _cucumber = require('cucumber');
var jsonfile = require('jsonfile');
var xml = require('xml');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function extractNumber(value){
  return (isNaN(value)) ? 0 : value;
}
/*********************************************************************/
/*********************************************************************/
var JunitTestCase = function () {
  function JunitTestCase(scenario) {
    _classCallCheck(this, JunitTestCase);

    this.testcase = scenario;
  }

  _createClass(JunitTestCase, [{
    key: "createJunitTestCase",
    value: function createJunitTestCase() {
      var cdataResult = this.createCdataAndGetTotalTime();
      var testcaseClassname = "",
          testcaseName = this.testcase.name,
          testcaseTime = cdataResult.time,
          createFailTag = cdataResult.hasFailStep,
          cdataString = cdataResult.cdata.join(" \n"),
          attributeObject = { _attr: { classname: testcaseClassname, name: testcaseName, time: testcaseTime } },
          innerObject;

      if (createFailTag) {
        innerObject = { failure: { _cdata: cdataString } };
      } else {
        innerObject = { "system-out": { _cdata: cdataString } };
      }

      return { testcase: [attributeObject, innerObject] };
    }
  }, {
    key: "createCdataAndGetTotalTime",
    value: function createCdataAndGetTotalTime() {
      var result = { time: 0, cdata: [], hasFailStep: false };
      this.testcase.steps.forEach(function (step) {
        result.time += extractNumber(step.result.duration);

        if (step.result.status === 'failed') {
          result.hasFailStep = true;
        }

        result.cdata.push(step.name);
      });
      return result;
    }
  }]);

  return JunitTestCase;
}();

/*********************************************************************/
/*********************************************************************/





var JunitFormatter = function (_Formatter) {
  _inherits(JunitFormatter, _Formatter);

  function JunitFormatter() {
    _classCallCheck(this, JunitFormatter);
    this.Scenarios = [];
    this.testsuite = {failed: 0, skipped: 0, tests:0,  time:0}
    return _possibleConstructorReturn(this, (JunitFormatter.__proto__ || Object.getPrototypeOf(JunitFormatter)).apply(this, arguments));
  }

  _createClass(JunitFormatter, [{
    key: 'handleBeforeScenario',
    value: function handleBeforeScenario(scenario) {
      // this.log(scenario.feature.name + ' / ' + scenario.name + '\n');
      this.currentScenario = {steps: [], time: 0, name:""};
      // this.Scenarios.push(scenario);
    }
  }, {
    key: 'handleStepResult',
    value: function handleStepResult(stepResult) {
      var step = stepResult.step;
      var status = stepResult.status;

      var currentStep = {
        keyword: step.keyword,
        name: step.name,
        result: { status: status }
      };

      if(status === "passed" || status === "failed"){
        currentStep.result.duration = extractNumber(stepResult.duration);
        this.currentScenario.time += currentStep.result.duration;
        this.testsuite.time += currentStep.result.duration;

        if(status === "failed"){
          this.testsuite.failed++;
        }
      }

      if (step.constructor.name === 'Step') {
        this.currentScenario.steps.push(currentStep);
      }

    }
  },{
    key: 'handleAfterScenario',
    value: function handleAfterScenario(scenario) {
      // console.log(scenario.name);
      this.currentScenario.name = scenario.name;
      this.Scenarios.push(this.currentScenario);
      // console.log(this.currentScenario);
      // console.log(this.Scenarios);
      // var steps = scenario.steps;
      // steps.forEach(function(element){
      //   console.log(element);
      // });
    }
  }, {
    key: 'handleFeaturesResult',
    value: function handleFeaturesResult(featuresResult) {

      this.testsuite.tests = this.Scenarios.length;
      // console.log(this.Scenarios);
      // console.log("testsuite");
      // console.log(this.testsuite);
      var junitTestCases = [{ _attr: { failed: '80s', skipped: 'US', time: 1}}];


      this.Scenarios.forEach(function(element, index){
        // console.log(element);
        var aJunitTestCase = new JunitTestCase(element);
        // console.log(xml(aJunitTestCase.createJunitTestCase()));

        junitTestCases.push(aJunitTestCase.createJunitTestCase());
      });
      console.log(xml([{testsuite:junitTestCases}]));
    }
  }]);

  return JunitFormatter;
}(_cucumber.Formatter);




module.exports = JunitFormatter;
